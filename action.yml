name: "Setup CI Environment"
author: "aarkegz et al. @ arceos-org"
description: "Setup the CI environment for ArceOS-related projects"

env:
  COLOR_YELLOW: |
    \033[93;1m"
  COLOR_GREEN: "\033[92;1m"
  COLOR_RED: "\033[91;1m"
  COLOR_BOLD: "\033[1m"
  COLOR_CLEAR: |
    \033[0m"

inputs:
  arch:
    description: |
      The target architecture.
      Currently supported: `x86_64`, `riscv64`, `aarch64`, to be supported: `loongarch64`".
    required: false
    # Default to x86_64 because it's the host architecture and used for doc and unit tests
    default: "x86_64"
  rust-toolchain:
    description: |
      Rust toolchain version to install, set it to 'none' to skip Rust toolchain installation.
    required: false
    default: "nightly"
  rust-components:
    description: |
      Rustup components to install, separated by commas.
    required: false
    default: "rust-src"
  rust-targets:
    description: |
      Rust targets to install, separated by commas, leave it empty to auto-detect from `arch`.
    required: false
    default: ""
  qemu:
    description: |
      QEMU version to install, set it to 'none' to skip QEMU installation.
    required: false
    # The latest stable version of QEMU as of the date this file was created
    default: "9.2.3"

runs:
  using: "composite"
  steps:
  ##################################################################################################
  # Input processing and debugging
  ##################################################################################################
  - name: Check target architecture
    id: check-arch
    run: |
      : Determine the Rust targets based on the architecture specified
      if [ "${{ inputs.rust-targets }}" == "" ]; then
        case "${{ inputs.arch }}" in
          x86_64)
            echo "RUST_TARGETS=x86_64-unknown-linux-gnu,x86_64-unknown-none" >> $GITHUB_ENV
            ;;
          riscv64)
            echo "RUST_TARGETS=riscv64gc-unknown-none-elf" >> $GITHUB_ENV
            ;;
          aarch64)
            echo "RUST_TARGETS=aarch64-unknown-linux-gnu,aarch64-unknown-none" >> $GITHUB_ENV
            ;;
          *)
            echo -e "Unsupported architecture: ${COLOR_RED}${{ inputs.arch }}${COLOR_CLEAR}"
            exit 1
            ;;
        esac
      else
        echo "RUST_TARGETS=${{ inputs.rust-targets }}" >> $GITHUB_ENV
      fi
    shell: bash

  - name: Print actions to be performed
    run: |
      : Print the actions to be performed
      echo -e "\033[33;1mActions to be performed\033[0m:"
      echo -e "arch: ${COLOR_GREEN}${{ inputs.arch }}${COLOR_CLEAR}"
      
      if [ "${{ inputs.rust-toolchain }}" != "none" ]; then
        echo -e "rust-toolchain: ${COLOR_GREEN}yes${COLOR_CLEAR}"
        echo -e "  version: ${COLOR_BOLD}${{ inputs.rust-toolchain }}${COLOR_CLEAR}"
        echo -e "  components: ${COLOR_BOLD}${{ inputs.rust-components }}${COLOR_CLEAR}"
        echo -e "  targets: ${COLOR_BOLD}${{ env.RUST_TARGETS }}${COLOR_CLEAR}"
      else
        echo -e "rust-toolchain: ${COLOR_YELLOW}no${COLOR_CLEAR}"
      fi

      if [ "${{ inputs.qemu }}" != "none" ]; then
        echo -e "qemu: ${COLOR_GREEN}yes${COLOR_CLEAR}"
        echo -e "  version: ${COLOR_BOLD}${{ inputs.qemu }}${COLOR_CLEAR}"
      else
        echo -e "qemu: ${COLOR_YELLOW}no${COLOR_CLEAR}"
      fi
    shell: bash

  ##################################################################################################
  # Rust toolchain
  ##################################################################################################
  - name: Install Rust toolchain
    if: ${{ inputs.rust-toolchain != 'none' }}
    uses: dtolnay/rust-toolchain@stable
    with:
      toolchain: ${{ inputs.rust-toolchain }}
      components: ${{ inputs.rust-components }}
      targets: ${{ env.RUST_TARGETS }}
  - name: Install cargo-binutils
    if: ${{ inputs.rust-toolchain != 'none' }}
    run: |
      : Install cargo-binutils for the current Rust toolchain
      cargo install cargo-binutils
    shell: bash
  - name: Check Rust toolchain
    if: ${{ inputs.rust-toolchain != 'none' }}
    run: |
      : Check the installed Rust toolchain and components
      rustup show
      rustc --version
      cargo --version
      cargo +${{ inputs.rust-toolchain }} --version
    shell: bash

  ##################################################################################################
  # QEMU
  ##################################################################################################
  - name: Check QEMU Cache
    id: cache-qemu
    if: ${{ inputs.qemu != 'none' }}
    uses: actions/cache/restore@v4
    with:
      path: qemu_build
      key: qemu-${{ inputs.qemu }}-${{ inputs.arch }}-slirp-1
  - name: Download and build QEMU
    if: ${{ inputs.qemu != 'none' && steps.cache-qemu.outputs.cache-hit != 'true' }}
    env:
      QEMU_PATH: qemu-${{ inputs.qemu }}
      PREFIX: ${{ github.workspace }}/qemu_build
    run: |
      : Download and build QEMU
      sudo apt-get update && sudo apt-get install -y ninja-build libslirp-dev libglib2.0-dev
      wget https://download.qemu.org/$QEMU_PATH.tar.xz && tar -xJf $QEMU_PATH.tar.xz
      cd $QEMU_PATH \
        && ./configure --prefix=$PREFIX --target-list=${{ inputs.arch }}-softmmu --enable-slirp \
        && make -j > /dev/null 2>&1 \
        && make install
    shell: bash
  - name: Cache QEMU
    if: ${{ inputs.qemu != 'none' && steps.cache-qemu.outputs.cache-hit != 'true' }}
    uses: actions/cache/save@v4
    with:
      path: qemu_build
      key: qemu-${{ inputs.qemu }}-${{ inputs.arch }}-slirp-1
  - name: Install QEMU
    if: ${{ inputs.qemu != 'none' }}
    run: |
      : Install QEMU
      echo "$PWD/qemu_build/bin" >> $GITHUB_PATH
    shell: bash
  - name: Verify QEMU installation
    if: ${{ inputs.qemu != 'none' }}
    run: |
      : Verify QEMU installation
      qemu-system-${{ inputs.arch }} --version
    shell: bash
